version: '3.8'

services:
  # MariaDB Database
  database:
    image: mariadb:10.8
    container_name: adamant-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${DB_NAME:-experiment_data}
      MYSQL_USER: ${DB_USER:-adamant_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-adamant_password}
    volumes:
      - db_data:/var/lib/mysql
      - ./docker/database/init:/docker-entrypoint-initdb.d
      - ./docker/database/conf:/etc/mysql/conf.d
    ports:
      - "3307:3306"
    networks:
      - adamant-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD:-rootpassword}"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 30s

  # Flask Backend API
  backend:
    image: python:3.8-slim
    container_name: adamant-backend
    restart: unless-stopped
    environment:
      - DB_HOST=database
      - DB_PORT=3306
      - DB_USER=${DB_USER:-adamant_user}
      - DB_PASSWORD=${DB_PASSWORD:-adamant_password}
      - DB_NAME=${DB_NAME:-experiment_data}
      - FLASK_ENV=production
      - PYTHONPATH=/app
    volumes:
      - ./backend:/app
      - shared_data:/data
      - backend_logs:/app/logs
    ports:
      - "5000:5000"
    networks:
      - adamant-network
    depends_on:
      database:
        condition: service_healthy
    command: >
      bash -c "
        cd /app &&
        pip install -r requirements.txt &&
        python api.py
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 40s

  # React Frontend
  frontend:
    image: nginx:alpine
    container_name: adamant-frontend
    restart: unless-stopped
    volumes:
      - ./build:/usr/share/nginx/html:ro
      - shared_data:/data:ro
    ports:
      - "8080:80"
      - "8443:443"
    networks:
      - adamant-network
    depends_on:
      - backend
    command: >
      sh -c "
        echo 'server {
          listen 80;
          server_name localhost;
          root /usr/share/nginx/html;
          index index.html;
          location / {
            try_files \$uri \$uri/ /index.html;
            add_header Cache-Control \"no-cache, no-store, must-revalidate\";
          }
          location /health {
            access_log off;
            return 200 \"healthy\n\";
            add_header Content-Type text/plain;
          }
          location /api/ {
            proxy_pass http://backend:5000/;
          }
        }' > /etc/nginx/conf.d/default.conf &&
        nginx -g 'daemon off;'
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 30s

  # Database UI
  db-ui:
    image: nginx:alpine
    container_name: adamant-db-ui
    restart: unless-stopped
    volumes:
      - ./db-ui/build:/usr/share/nginx/html:ro
      - shared_data:/data:ro
    ports:
      - "3011:3011"
    networks:
      - adamant-network
    depends_on:
      - database
    command: >
      sh -c "
        echo 'server {
          listen 3011;
          server_name localhost;
          root /usr/share/nginx/html;
          index index.html;
          location / {
            try_files \$uri \$uri/ /index.html;
            add_header Cache-Control \"no-cache, no-store, must-revalidate\";
          }
          location /health {
            access_log off;
            return 200 \"healthy\n\";
            add_header Content-Type text/plain;
          }
        }' > /etc/nginx/conf.d/default.conf &&
        nginx -g 'daemon off;'
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3011/health"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 30s

  # Data Processing Scripts
  scripts:
    image: python:3.8-slim
    container_name: adamant-scripts
    restart: unless-stopped
    environment:
      - DB_HOST=database
      - DB_PORT=3306
      - DB_USER=${DB_USER:-adamant_user}
      - DB_PASSWORD=${DB_PASSWORD:-adamant_password}
      - DB_NAME=${DB_NAME:-experiment_data}
      - NEXTCLOUD_HOST=${NEXTCLOUD_HOST:-nextcloud}
      - NEXTCLOUD_USER=${NEXTCLOUD_USER:-root}
    volumes:
      - shared_data:/data
      - ./bin:/app/scripts:ro
      - scripts_logs:/app/logs
    networks:
      - adamant-network
    depends_on:
      database:
        condition: service_healthy
    command: >
      bash -c "
        apt-get update && apt-get install -y curl mysql-client &&
        pip install pymysql &&
        while true; do
          /app/scripts/insert_data2db.sh
          sleep 3600
        done
      "

  # Data Synchronization Scripts
  sync:
    image: python:3.8-slim
    container_name: adamant-sync
    restart: unless-stopped
    environment:
      - NEXTCLOUD_HOST=${NEXTCLOUD_HOST:-nextcloud}
      - NEXTCLOUD_USER=${NEXTCLOUD_USER:-root}
    volumes:
      - shared_data:/data
      - ./bin:/app/scripts:ro
      - sync_logs:/app/logs
      - ~/.ssh:/root/.ssh:ro
    networks:
      - adamant-network
    command: >
      bash -c "
        apt-get update && apt-get install -y curl rsync openssh-client &&
        pip install pymysql &&
        while true; do
          /app/scripts/syncscript.sh
          sleep 3600
        done
      "

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: adamant-nginx
    restart: unless-stopped
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - adamant-network
    depends_on:
      - frontend
      - backend
      - db-ui
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 30s

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: adamant-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - adamant-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 5s
      retries: 5
      interval: 30s
      start_period: 10s

volumes:
  db_data:
    driver: local
  shared_data:
    driver: local
  backend_logs:
    driver: local
  scripts_logs:
    driver: local
  sync_logs:
    driver: local
  nginx_logs:
    driver: local
  redis_data:
    driver: local

networks:
  adamant-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16


